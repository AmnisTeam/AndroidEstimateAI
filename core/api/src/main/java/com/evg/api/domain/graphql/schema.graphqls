schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getTestsResponse(page: Int!): GetTestsResponse!
}

type Mutation {
  registerUserResponse(data: UserRegistrationDTO!): UserRegistrationResponse!
  loginUserResponse(data: UserLoginDTO!): UserLoginResponse!
  passwordResetResponse(data: PasswordResetDTO!): PasswordResetResponse!
  createEssayTestResponse(data: CreateEssayTestDTO!): CreateEssayTestResponse!
}

type Subscription {
  onTestProgressResponse(topicId: ID!): OnTestProgressResponse!
}

input UserRegistrationDTO {
  email: String!
  password: String!
}
type UserRegistrationResponse {
  code: Int!
}

input UserLoginDTO {
  email: String!
  password: String!
}
type UserLoginResponse {
  token: String!
  code: Int!
}

input PasswordResetDTO {
  email: String!
}
type PasswordResetResponse {
  code: Int!
}

input CreateEssayTestDTO {
  essay: String!
}
type CreateEssayTestResponse {
  code: Int!
  id: Int!
}

union TestResult = ReadyTest | LoadingTest
type GetTestsResponse {
  code: Int!
  count: Int!
  pages: Int!
  next: Int
  prev: Int
  topics: [TestResult!]!
}
type ReadyTest {
  id: Int!
  title: String!
  type: String!
  status: String!
  level: String!
  createdAt: Int!
}

type OnTestProgressResponse {
  code: Int!
  loadingTest: LoadingTest!
}
type LoadingTest {
  id: Int!
  progress: Int!
  queue: Int!
  createdAt: Int!
}
